(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{282:function(a,t,r){"use strict";r.r(t);var s=r(13),o=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"总结arriylist与hashmap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结arriylist与hashmap"}},[a._v("#")]),a._v(" 总结ArriyList与HashMap")]),a._v(" "),t("p",[a._v("ArriyList：")]),a._v(" "),t("p",[t("strong",[a._v("即向数组中添加第一个元素时，数组容量扩为 10")]),a._v(" "),t("strong",[a._v("1.5 倍左右")])]),a._v(" "),t("p",[a._v("HashMap：")]),a._v(" "),t("p",[a._v("​\t给定的默认容量为 16，负载因子为 0.75。Map 在使用过程中不断的往里面存放数据，当数量达到了 16 * 0.75 = 12 就需要将当前 16 的容量进行扩容，而扩容这个过程涉及到 rehash、复制数据等操作，所以非常消耗性能。")]),a._v(" "),t("p",[t("strong",[a._v("loadFactor 加载因子")])]),a._v(" "),t("p",[a._v("loadFactor 加载因子是控制数组存放数据的疏密程度，loadFactor 越趋近于 1，那么 数组中存放的数据(entry)也就越多，也就越密，也就是会让链表的长度增加，loadFactor 越小，也就是趋近于 0，数组中存放的数据(entry)也就越少，也就越稀疏。")]),a._v(" "),t("p",[a._v("loadFactor 太大导致查找元素效率低，太小导致数组的利用率低，存放的数据会很分散。loadFactor 的默认值为 0.75f 是官方给出的一个比较好的临界值。")]),a._v(" "),t("p",[a._v("给定的默认容量为 16，负载因子为 0.75。Map 在使用过程中不断的往里面存放数据，当数量达到了 16 * 0.75 = 12 就需要将当前 16 的容量进行扩容，而扩容这个过程涉及到 rehash、复制数据等操作，所以非常消耗性能。")]),a._v(" "),t("p",[t("strong",[a._v("注意：扩容因子可以大于1，当扩容因子为2时，表示当数量达到了 16 * 2 = 32才需要将当前 16 的容量进行扩容（16指的是容量，哈希桶的桶数量。32数量是指当前hashmap做存放的键值对数量）")])])])}),[],!1,null,null,null);t.default=o.exports}}]);