(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{339:function(n,t,a){"use strict";a.r(t);var s=a(13),e=Object(s.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"spring事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring事务"}},[n._v("#")]),n._v(" Spring事务")]),n._v(" "),t("p",[n._v("一、未开启事务执行流程\n1.每个Mapper接口的执行时（mapper类的方法），调用Mapper自带的sqlsessionTemplate去执行，sqlsessionTemplate调用自身的\nSqlSession sqlSessionProxy（是一个动态代理的类）去执行，所以最终调用SqlSessionInterceptor的invoke方法，先通过getSqlSession获取sqlsession，先从线程threadlocal中获取，获取不到进入sessionFactory.openSession获取，获取到的sqlsession里面有个excutor执行器，里面有个transaction事务，事务里面的connection数据库连接是空的SpringManagedTransaction。excutor执行的时候会去获取连接SpringManagedTransaction.getConnection()：")]),n._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[n._v("  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("public")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Connection")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("getConnection")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("throws")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("SQLException")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("connection "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("==")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("openConnection")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("return")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("connection"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("/**\n   * Gets a connection from Spring transaction manager and discovers if this {@code Transaction} should manage\n   * connection or let it to Spring.\n   * <p>\n   * It also reads autocommit setting because when using Spring Transaction MyBatis thinks that autocommit is always\n   * false and will always call commit/rollback so we need to no-op that calls.\n   */")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("private")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("void")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("openConnection")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("throws")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("SQLException")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("connection "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("DataSourceUtils")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("getConnection")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("dataSource"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("autoCommit "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("connection"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("getAutoCommit")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("isConnectionTransactional "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("DataSourceUtils")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("isConnectionTransactional")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("connection"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("dataSource"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n    LOGGER"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("debug")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("->")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[n._v('"JDBC Connection ["')]),n._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("+")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("connection "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("+")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[n._v('"] will"')]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("+")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("isConnectionTransactional "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("?")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[n._v('" "')]),n._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v(":")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[n._v('" not "')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("+")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[n._v('"be managed by Spring"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])])]),t("p",[n._v("事务获取连接的时候也是根据数据源从threadlocal获取，不过获取不到，然后用数据源新建一个连接返回。")]),n._v(" "),t("p",[n._v("每个Mapper都是上面的执行流程")]),n._v(" "),t("p",[n._v("二、开启事务:")]),n._v(" "),t("p",[n._v("1.@Transactional   的拦截器 TransactionIntercepter")]),n._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[n._v("\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//开启事务（新建一个事务，获取一个数据库连接，保存到threadlocal，事务持有这个连接，事务也保存在threadlocal）\t\t")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("TransactionInfo")]),n._v(" txInfo "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("createTransactionIfNecessary")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("ptm"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" txAttr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" joinpointIdentification"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n\t\t\t"),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Object")]),n._v(" retVal"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\t\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("try")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\t\t\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// This is an around advice: Invoke the next interceptor in the chain.")]),n._v("\n\t\t\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// This will normally result in a target object being invoked.")]),n._v("\n\t\t\t\tretVal "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" invocation"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("proceedWithInvocation")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\t\t\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\t\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("catch")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Throwable")]),n._v(" ex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\t\t\t\t"),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// target invocation exception")]),n._v("\n\t\t\t\t"),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("completeTransactionAfterThrowing")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("txInfo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" ex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\t\t\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("throw")]),n._v(" ex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\t\t\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\t\t\t"),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("finally")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\t\t\t\t"),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("cleanupTransactionInfo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("txInfo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\t\t\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])])]),t("p",[n._v("第一个Mapper接口的执行时（mapper类的方法），跟上面一样，只是事务获取连接DataSourceUtils.getConnection的时候也是根据数据源从threadlocal获取，不过这次能取到了。绑定到当前事务中，当前事务绑定在sqlsession中，sqlsession又存到threadlocal中。")]),n._v(" "),t("p",[n._v("下一个Mapper接口的执行时，getSqlSession获取sqlsession，先从线程threadlocal中获取，这次能获取到前一个存下来的sqlsession，事务与连接都是同一个。")]),n._v(" "),t("div",{staticClass:"language-java extra-class"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("private")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("class")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("SqlSessionInterceptor")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("implements")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("InvocationHandler")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[n._v("@Override")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("public")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Object")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("invoke")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Object")]),n._v(" proxy"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Method")]),n._v(" method"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("throws")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Throwable")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("SqlSession")]),n._v(" sqlSession "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("getSqlSession")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("SqlSessionTemplate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("sqlSessionFactory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v("\n          "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("SqlSessionTemplate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("executorType"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("SqlSessionTemplate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("exceptionTranslator"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("try")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Object")]),n._v(" result "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" method"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("invoke")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("sqlSession"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("!")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("isSqlSessionTransactional")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("sqlSession"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("SqlSessionTemplate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("sqlSessionFactory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n          "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// force commit even on non-dirty sessions because some databases require")]),n._v("\n          "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// a commit/rollback before calling close()")]),n._v("\n          sqlSession"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("commit")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[n._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("return")]),n._v(" result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("catch")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Throwable")]),n._v(" t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Throwable")]),n._v(" unwrapped "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("unwrapThrowable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("SqlSessionTemplate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("exceptionTranslator "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("!=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("&&")]),n._v(" unwrapped "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("instanceof")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("PersistenceException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n          "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// release the connection to avoid a deadlock if the translator is no loaded. See issue #22")]),n._v("\n          "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("closeSqlSession")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("sqlSession"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("SqlSessionTemplate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("sqlSessionFactory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n          sqlSession "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n          "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Throwable")]),n._v(" translated "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("SqlSessionTemplate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("exceptionTranslator\n              "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("translateExceptionIfPossible")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("PersistenceException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" unwrapped"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n          "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("translated "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("!=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            unwrapped "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" translated"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("throw")]),n._v(" unwrapped"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("finally")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("sqlSession "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("!=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n          "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("closeSqlSession")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("sqlSession"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("SqlSessionTemplate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("sqlSessionFactory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("public")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("static")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("SqlSession")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("getSqlSession")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("SqlSessionFactory")]),n._v(" sessionFactory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ExecutorType")]),n._v(" executorType"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("PersistenceExceptionTranslator")]),n._v(" exceptionTranslator"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("notNull")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("sessionFactory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" NO_SQL_SESSION_FACTORY_SPECIFIED"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("notNull")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("executorType"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" NO_EXECUTOR_TYPE_SPECIFIED"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("SqlSessionHolder")]),n._v(" holder "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("SqlSessionHolder")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("TransactionSynchronizationManager")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("getResource")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("sessionFactory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("SqlSession")]),n._v(" session "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("sessionHolder")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("executorType"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" holder"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("session "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("!=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("return")]),n._v(" session"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n    LOGGER"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("debug")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("->")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[n._v('"Creating a new SqlSession"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    session "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" sessionFactory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("openSession")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("executorType"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("registerSessionHolder")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("sessionFactory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" executorType"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" exceptionTranslator"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" session"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("return")]),n._v(" session"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("private")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("SqlSession")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("openSessionFromDataSource")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ExecutorType")]),n._v(" execType"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("TransactionIsolationLevel")]),n._v(" level"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("boolean")]),n._v(" autoCommit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Transaction")]),n._v(" tx "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("try")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("final")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Environment")]),n._v(" environment "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" configuration"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("getEnvironment")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("final")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("TransactionFactory")]),n._v(" transactionFactory "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("getTransactionFactoryFromEnvironment")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("environment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n      tx "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" transactionFactory"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("newTransaction")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("environment"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("getDataSource")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" level"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" autoCommit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("final")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Executor")]),n._v(" executor "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" configuration"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("newExecutor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("tx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" execType"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("return")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("DefaultSqlSession")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("configuration"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" executor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" autoCommit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("catch")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Exception")]),n._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("closeTransaction")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("tx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// may have fetched a connection so lets call close()")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("throw")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ExceptionFactory")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("wrapException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[n._v('"Error opening session.  Cause: "')]),n._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("+")]),n._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("finally")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n      "),t("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("ErrorContext")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("instance")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("reset")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])])]),t("h1",{attrs:{id:""}},[t("a",{staticClass:"header-anchor",attrs:{href:"#"}},[n._v("#")])]),n._v(" "),t("h3",{attrs:{id:"mybaits-源码解析-十二-mybatis的事务如何被spring管理-mybatis和spring事务中用的connection是同一个吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mybaits-源码解析-十二-mybatis的事务如何被spring管理-mybatis和spring事务中用的connection是同一个吗"}},[n._v("#")]),n._v(" "),t("a",{attrs:{href:"https://www.cnblogs.com/java-chen-hao/p/11839993.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("Mybaits 源码解析 （十二）----- Mybatis的事务如何被Spring管理？Mybatis和Spring事务中用的Connection是同一个吗？"),t("OutboundLink")],1)]),n._v(" "),t("p",[t("strong",[n._v("目录")])]),n._v(" "),t("ul",[t("li",[n._v("SpringManagedTransaction\n"),t("ul",[t("li",[t("a",{attrs:{href:"https://www.cnblogs.com/java-chen-hao/p/11839993.html#_label0_0",target:"_blank",rel:"noopener noreferrer"}},[n._v("org.springframework.jdbc.datasource.DataSourceUtils#getConnection"),t("OutboundLink")],1)]),n._v(" "),t("li",[t("a",{attrs:{href:"https://www.cnblogs.com/java-chen-hao/p/11839993.html#_label0_1",target:"_blank",rel:"noopener noreferrer"}},[n._v("org.springframework.transaction.support.TransactionSynchronizationManager#getResource"),t("OutboundLink")],1)])])])]),n._v(" "),t("p",[t("strong",[n._v("正文")])]),n._v(" "),t("p",[n._v("不知道一些同学有没有这种疑问，为什么Mybtis中要配置dataSource，Spring的事务中也要配置dataSource？那么Mybatis和Spring事务中用的Connection是同一个吗？我们常用配置如下")]),n._v(" "),t("p",[n._v("["),t("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('\x3c!--会话工厂 --\x3e\n<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">\n  <property name="dataSource" ref="dataSource" />\n</bean>\n\n\x3c!--spring事务管理 --\x3e\n<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">\n  <property name="dataSource" ref="dataSource" />\n</bean>\n\n\x3c!--使用注释事务 --\x3e\n<tx:annotation-driven  transaction-manager="transactionManager" />\n')])])]),t("p",[n._v("["),t("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),t("p",[n._v("看到没，"),t("strong",[n._v("sqlSessionFactory中配置了"),t("strong",[t("strong",[n._v("dataSource，"),t("strong",[t("strong",[n._v("transactionManager也配置了")])]),n._v("dataSource，我们来回忆一下")])]),n._v("SqlSessionFactoryBean这个类")])]),n._v(" "),t("p",[n._v("["),t("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(' 1 protected SqlSessionFactory buildSqlSessionFactory() throws IOException {\n 2 \n 3     // 配置类\n 4    Configuration configuration;\n 5     // 解析mybatis-Config.xml文件，\n 6     // 将相关配置信息保存到configuration\n 7    XMLConfigBuilder xmlConfigBuilder = null;\n 8    if (this.configuration != null) {\n 9      configuration = this.configuration;\n10      if (configuration.getVariables() == null) {\n11        configuration.setVariables(this.configurationProperties);\n12      } else if (this.configurationProperties != null) {\n13        configuration.getVariables().putAll(this.configurationProperties);\n14      }\n15     //资源文件不为空\n16    } else if (this.configLocation != null) {\n17      //根据configLocation创建xmlConfigBuilder，XMLConfigBuilder构造器中会创建Configuration对象\n18      xmlConfigBuilder = new XMLConfigBuilder(this.configLocation.getInputStream(), null, this.configurationProperties);\n19      //将XMLConfigBuilder构造器中创建的Configuration对象直接赋值给configuration属性\n20      configuration = xmlConfigBuilder.getConfiguration();\n21    } \n22    \n23     //略....\n24 \n25    if (xmlConfigBuilder != null) {\n26      try {\n27        //解析mybatis-Config.xml文件，并将相关配置信息保存到configuration\n28        xmlConfigBuilder.parse();\n29        if (LOGGER.isDebugEnabled()) {\n30          LOGGER.debug("Parsed configuration file: \'" + this.configLocation + "\'");\n31        }\n32      } catch (Exception ex) {\n33        throw new NestedIOException("Failed to parse config resource: " + this.configLocation, ex);\n34      }\n35    }\n36     \n37    if (this.transactionFactory == null) {\n38      //事务默认采用SpringManagedTransaction，这一块非常重要\n39      this.transactionFactory = new SpringManagedTransactionFactory();\n40    }\n41     // 为sqlSessionFactory绑定事务管理器和数据源\n42     // 这样sqlSessionFactory在创建sqlSession的时候可以通过该事务管理器获取jdbc连接，从而执行SQL\n43    configuration.setEnvironment(new Environment(this.environment, this.transactionFactory, this.dataSource));\n44     // 解析mapper.xml\n45    if (!isEmpty(this.mapperLocations)) {\n46      for (Resource mapperLocation : this.mapperLocations) {\n47        if (mapperLocation == null) {\n48          continue;\n49        }\n50        try {\n51          // 解析mapper.xml文件，并注册到configuration对象的mapperRegistry\n52          XMLMapperBuilder xmlMapperBuilder = new XMLMapperBuilder(mapperLocation.getInputStream(),\n53              configuration, mapperLocation.toString(), configuration.getSqlFragments());\n54          xmlMapperBuilder.parse();\n55        } catch (Exception e) {\n56          throw new NestedIOException("Failed to parse mapping resource: \'" + mapperLocation + "\'", e);\n57        } finally {\n58          ErrorContext.instance().reset();\n59        }\n60 \n61        if (LOGGER.isDebugEnabled()) {\n62          LOGGER.debug("Parsed mapper file: \'" + mapperLocation + "\'");\n63        }\n64      }\n65    } else {\n66      if (LOGGER.isDebugEnabled()) {\n67        LOGGER.debug("Property \'mapperLocations\' was not specified or no matching resources found");\n68      }\n69    }\n70 \n71     // 将Configuration对象实例作为参数，\n72     // 调用sqlSessionFactoryBuilder创建sqlSessionFactory对象实例\n73    return this.sqlSessionFactoryBuilder.build(configuration);\n74 }\n')])])]),t("p",[n._v("["),t("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),t("p",[n._v("我们看第39行，Mybatis集成Spring后，默认使用的transactionFactory是SpringManagedTransactionFactory，那我们就来看看其获取Transaction的方法")]),n._v(" "),t("p",[n._v("["),t("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('private SqlSession openSessionFromConnection(ExecutorType execType, Connection connection) {\n    try {\n      boolean autoCommit;\n      try {\n        autoCommit = connection.getAutoCommit();\n      } catch (SQLException e) {\n        // Failover to true, as most poor drivers\n        // or databases won\'t support transactions\n        autoCommit = true;\n      }      \n      //从configuration中取出environment对象\n      final Environment environment = configuration.getEnvironment();\n      //从environment中取出TransactionFactory\n      final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);\n      //创建Transaction\n      final Transaction tx = transactionFactory.newTransaction(connection);\n      //创建包含事务操作的执行器\n      final Executor executor = configuration.newExecutor(tx, execType);\n      //构建包含执行器的SqlSession\n      return new DefaultSqlSession(configuration, executor, autoCommit);\n    } catch (Exception e) {\n      throw ExceptionFactory.wrapException("Error opening session.  Cause: " + e, e);\n    } finally {\n      ErrorContext.instance().reset();\n    }\n}\n\nprivate TransactionFactory getTransactionFactoryFromEnvironment(Environment environment) {\n    if (environment == null || environment.getTransactionFactory() == null) {\n      return new ManagedTransactionFactory();\n    }\n    //这里返回SpringManagedTransactionFactory\n    return environment.getTransactionFactory();\n}\n\n@Override\npublic Transaction newTransaction(DataSource dataSource, TransactionIsolationLevel level, boolean autoCommit) {\n    //创建SpringManagedTransaction\n    return new SpringManagedTransaction(dataSource);\n}\n')])])]),t("p",[n._v("["),t("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),t("p",[t("a",{attrs:{href:"https://www.cnblogs.com/java-chen-hao/p/11839993.html#_labelTop",target:"_blank",rel:"noopener noreferrer"}},[n._v("回到顶部"),t("OutboundLink")],1)]),n._v(" "),t("h2",{attrs:{id:"springmanagedtransaction"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springmanagedtransaction"}},[n._v("#")]),n._v(" SpringManagedTransaction")]),n._v(" "),t("p",[n._v("也就是说mybatis的执行事务的事务管理器就切换成了SpringManagedTransaction，下面我们再去看看SpringManagedTransactionFactory类的源码：")]),n._v(" "),t("p",[n._v("["),t("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('public class SpringManagedTransaction implements Transaction {\n    private static final Log LOGGER = LogFactory.getLog(SpringManagedTransaction.class);\n    private final DataSource dataSource;\n    private Connection connection;\n    private boolean isConnectionTransactional;\n    private boolean autoCommit;\n\n    public SpringManagedTransaction(DataSource dataSource) {\n        Assert.notNull(dataSource, "No DataSource specified");\n        this.dataSource = dataSource;\n    }\n\n    public Connection getConnection() throws SQLException {\n        if (this.connection == null) {\n            this.openConnection();\n        }\n\n        return this.connection;\n    }\n\n    private void openConnection() throws SQLException {\n        //通过DataSourceUtils获取connection，这里和JdbcTransaction不一样\n        this.connection = DataSourceUtils.getConnection(this.dataSource);\n        this.autoCommit = this.connection.getAutoCommit();\n        this.isConnectionTransactional = DataSourceUtils.isConnectionTransactional(this.connection, this.dataSource);\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug("JDBC Connection [" + this.connection + "] will" + (this.isConnectionTransactional ? " " : " not ") + "be managed by Spring");\n        }\n\n    }\n\n    public void commit() throws SQLException {\n        if (this.connection != null && !this.isConnectionTransactional && !this.autoCommit) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug("Committing JDBC Connection [" + this.connection + "]");\n            }\n            //通过connection提交，这里和JdbcTransaction一样\n            this.connection.commit();\n        }\n\n    }\n\n    public void rollback() throws SQLException {\n        if (this.connection != null && !this.isConnectionTransactional && !this.autoCommit) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug("Rolling back JDBC Connection [" + this.connection + "]");\n            }\n            //通过connection回滚，这里和JdbcTransaction一样\n            this.connection.rollback();\n        }\n\n    }\n\n    public void close() throws SQLException {\n        DataSourceUtils.releaseConnection(this.connection, this.dataSource);\n    }\n\n    public Integer getTimeout() throws SQLException {\n        ConnectionHolder holder = (ConnectionHolder)TransactionSynchronizationManager.getResource(this.dataSource);\n        return holder != null && holder.hasTimeout() ? holder.getTimeToLiveInSeconds() : null;\n    }\n}\n')])])]),t("p",[n._v("["),t("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),t("h3",{attrs:{id:"org-springframework-jdbc-datasource-datasourceutils-getconnection"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#org-springframework-jdbc-datasource-datasourceutils-getconnection"}},[n._v("#")]),n._v(" org.springframework.jdbc.datasource.DataSourceUtils#getConnection")]),n._v(" "),t("p",[n._v("["),t("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('public static Connection getConnection(DataSource dataSource) throws CannotGetJdbcConnectionException {\n    try {\n        return doGetConnection(dataSource);\n    }\n    catch (SQLException ex) {\n        throw new CannotGetJdbcConnectionException("Could not get JDBC Connection", ex);\n    }\n}\n\npublic static Connection doGetConnection(DataSource dataSource) throws SQLException {\n    Assert.notNull(dataSource, "No DataSource specified");\n    //TransactionSynchronizationManager重点！！！有没有很熟悉的感觉？？\n    //还记得我们前面Spring事务源码的分析吗？@Transaction会创建Connection，并放入ThreadLocal中\n    //这里从ThreadLocal中获取ConnectionHolder\n    ConnectionHolder conHolder = (ConnectionHolder)TransactionSynchronizationManager.getResource(dataSource);\n    if (conHolder == null || !conHolder.hasConnection() && !conHolder.isSynchronizedWithTransaction()) {\n        logger.debug("Fetching JDBC Connection from DataSource");\n        //如果没有使用@Transaction，那调用Mapper接口方法时，也是通过Spring的方法获取Connection\n        Connection con = fetchConnection(dataSource);\n        if (TransactionSynchronizationManager.isSynchronizationActive()) {\n            logger.debug("Registering transaction synchronization for JDBC Connection");\n            ConnectionHolder holderToUse = conHolder;\n            if (conHolder == null) {\n                holderToUse = new ConnectionHolder(con);\n            } else {\n                conHolder.setConnection(con);\n            }\n\n            holderToUse.requested();\n            TransactionSynchronizationManager.registerSynchronization(new DataSourceUtils.ConnectionSynchronization(holderToUse, dataSource));\n            holderToUse.setSynchronizedWithTransaction(true);\n            if (holderToUse != conHolder) {\n                //将获取到的ConnectionHolder放入ThreadLocal中，那么当前线程调用下一个接口，下一个接口使用了Spring事务，那Spring事务也可以直接取到Mybatis创建的Connection\n                //通过ThreadLocal保证了同一线程中Spring事务使用的Connection和Mapper代理类使用的Connection是同一个\n                TransactionSynchronizationManager.bindResource(dataSource, holderToUse);\n            }\n        }\n\n        return con;\n    } else {\n        conHolder.requested();\n        if (!conHolder.hasConnection()) {\n            logger.debug("Fetching resumed JDBC Connection from DataSource");\n            conHolder.setConnection(fetchConnection(dataSource));\n        }\n\n        //所以如果我们业务代码使用了@Transaction注解，在Spring中就已经通过dataSource创建了一个Connection并放入ThreadLocal中\n        //那么当Mapper代理对象调用方法时，通过SqlSession的SpringManagedTransaction获取连接时，就直接获取到了当前线程中Spring事务创建的Connection并返回\n        return conHolder.getConnection();\n    }\n}\n')])])]),t("p",[n._v("["),t("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),t("p",[n._v("想看怎么获取connHolder")]),n._v(" "),t("h3",{attrs:{id:"org-springframework-transaction-support-transactionsynchronizationmanager-getresource"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#org-springframework-transaction-support-transactionsynchronizationmanager-getresource"}},[n._v("#")]),n._v(" org.springframework.transaction.support.TransactionSynchronizationManager#getResource")]),n._v(" "),t("p",[n._v("["),t("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('//保存数据库连接的ThreadLocal\nprivate static final ThreadLocal<Map<Object, Object>> resources = new NamedThreadLocal<>("Transactional resources");\n@Nullable\npublic static Object getResource(Object key) {\n    Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key);\n    //获取ConnectionHolder\n    Object value = doGetResource(actualKey);\n    ....\n    return value;\n}\n\n@Nullable\nprivate static Object doGetResource(Object actualKey) {\n    /**\n     * 从threadlocal <Map<Object, Object>>中取出来当前线程绑定的map\n     * map里面存的是<dataSource,ConnectionHolder>\n     */\n    Map<Object, Object> map = resources.get();\n    if (map == null) {\n        return null;\n    }\n    //map中取出来对应dataSource的ConnectionHolder\n    Object value = map.get(actualKey);\n    // Transparently remove ResourceHolder that was marked as void...\n    if (value instanceof ResourceHolder && ((ResourceHolder) value).isVoid()) {\n        map.remove(actualKey);\n        // Remove entire ThreadLocal if empty...\n        if (map.isEmpty()) {\n            resources.remove();\n        }\n        value = null;\n    }\n    return value;\n}\n')])])]),t("p",[n._v("["),t("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),t("p",[n._v("我们看到直接从ThreadLocal中取出来的conn,而spring自己的事务也是操作的这个ThreadLocal中的conn来进行事务的开启和回滚，由此我们知道了在同一线程中Spring事务中的Connection和Mybaits中Mapper代理对象中操作数据库的Connection是同一个，当取出来的conn为空时候,调用org.springframework.jdbc.datasource.DataSourceUtils#fetchConnection获取，然后把从数据源取出来的连接返回")]),n._v(" "),t("p",[n._v("["),t("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('private static Connection fetchConnection(DataSource dataSource) throws SQLException {\n    //从数据源取出来conn\n    Connection con = dataSource.getConnection();\n    if (con == null) {\n        throw new IllegalStateException("DataSource returned null from getConnection(): " + dataSource);\n    }\n    return con;\n}\n')])])]),t("p",[n._v("["),t("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),t("p",[n._v("我们再来回顾一下上篇文章中的SqlSessionInterceptor")]),n._v(" "),t("p",[n._v("["),t("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" 1 private class SqlSessionInterceptor implements InvocationHandler {\n 2     private SqlSessionInterceptor() {\n 3     }\n 4 \n 5     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n 6         SqlSession sqlSession = SqlSessionUtils.getSqlSession(SqlSessionTemplate.this.sqlSessionFactory, SqlSessionTemplate.this.executorType, SqlSessionTemplate.this.exceptionTranslator);\n 7 \n 8         Object unwrapped;\n 9         try {\n10             Object result = method.invoke(sqlSession, args);\n11             // 如果当前操作没有在一个Spring事务中，则手动commit一下\n12             // 如果当前业务没有使用@Transation,那么每次执行了Mapper接口的方法直接commit\n13             // 还记得我们前面讲的Mybatis的一级缓存吗，这里一级缓存不能起作用了，因为每执行一个Mapper的方法，sqlSession都提交了\n14             // sqlSession提交，会清空一级缓存\n15             if (!SqlSessionUtils.isSqlSessionTransactional(sqlSession, SqlSessionTemplate.this.sqlSessionFactory)) {\n16                 sqlSession.commit(true);\n17             }\n18 \n19             unwrapped = result;\n20         } catch (Throwable var11) {\n21             unwrapped = ExceptionUtil.unwrapThrowable(var11);\n22             if (SqlSessionTemplate.this.exceptionTranslator != null && unwrapped instanceof PersistenceException) {\n23                 SqlSessionUtils.closeSqlSession(sqlSession, SqlSessionTemplate.this.sqlSessionFactory);\n24                 sqlSession = null;\n25                 Throwable translated = SqlSessionTemplate.this.exceptionTranslator.translateExceptionIfPossible((PersistenceException)unwrapped);\n26                 if (translated != null) {\n27                     unwrapped = translated;\n28                 }\n29             }\n30 \n31             throw (Throwable)unwrapped;\n32         } finally {\n33             if (sqlSession != null) {\n34                 SqlSessionUtils.closeSqlSession(sqlSession, SqlSessionTemplate.this.sqlSessionFactory);\n35             }\n36 \n37         }\n38         return unwrapped;\n39     }\n40 }\n")])])]),t("p",[n._v("["),t("img",{attrs:{src:"https://common.cnblogs.com/images/copycode.gif",alt:"复制代码"}}),n._v("](javascript:void(0)😉")]),n._v(" "),t("p",[n._v("看第15和16行，如果我们没有使用@Transation，Mapper方法执行完后，sqlSession将会提交，也就是说通过org.springframework.jdbc.datasource.DataSourceUtils#fetchConnection获取到的Connection将会commit，相当于Connection是自动提交的，也就是说如果不使用@Transation，Mybatis将没有事务可言。")]),n._v(" "),t("p",[n._v("Mybatis和Spring整合后SpringManagedTransaction和Spring的Transaction的关系：")]),n._v(" "),t("ul",[t("li",[n._v("如果开启Spring事务，则先有Spring的Transaction，然后mybatis创建sqlSession时，会创建SpringManagedTransaction并加入sqlSession中，SpringManagedTransaction中的connection会从Spring的Transaction创建的Connection并放入ThreadLocal中获取")]),n._v(" "),t("li",[n._v("如果没有开启Spring事务或者第一个方法没有事务后面的方法有事务，则SpringManagedTransaction创建Connection并放入ThreadLocal中")])]),n._v(" "),t("p",[n._v("spring结合mybatis后mybaits一级缓存失效分为两种情况：")]),n._v(" "),t("ul",[t("li",[n._v("如果没有开启事务，每一次sql都是用的新的SqlSession，这时mybatis的一级缓存是失效的。")]),n._v(" "),t("li",[n._v("如果有事务，同一个事务中相同的查询使用的相同的SqlSessioon，此时一级缓存是生效的。")])]),n._v(" "),t("p",[n._v("如果使用了@Transation呢？那在调用Mapper代理类的方法之前就已经通过Spring的事务生成了Connection并放入ThreadLocal，并且设置事务不自动提交，当前线程多个Mapper代理对象调用数据库操作方法时，将从ThreadLocal获取Spring创建的connection,在所有的Mapper方法调用完后，Spring事务提交或者回滚，到此mybatis的事务是怎么被spring管理的就显而易见了")]),n._v(" "),t("p",[n._v("还有文章开头的问题，为什么Mybtis中要配置dataSource，Spring的事务中也要配置dataSource？")]),n._v(" "),t("p",[n._v("因为Spring事务在没调用Mapper方法之前就需要开一个Connection，并设置事务不自动提交，那么transactionManager中自然要配置dataSource。那如果我们的Service没有用到Spring事务呢，难道就不需要获取数据库连接了吗？当然不是，此时通过SpringManagedTransaction调用org.springframework.jdbc.datasource.DataSourceUtils#getConnection#fetchConnection方法获取，并将dataSource作为参数传进去，实际上获取的Connection都是通过dataSource来获取的。")])])}),[],!1,null,null,null);t.default=e.exports}}]);