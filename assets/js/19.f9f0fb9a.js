(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{290:function(t,e,n){"use strict";n.r(e);var o=n(13),r=Object(o.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"spring核心-执行顺序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring核心-执行顺序"}},[t._v("#")]),t._v(" Spring核心 - 执行顺序")]),t._v(" "),e("p",[t._v("BeanDefinitionRegistryPostProcessor\nBeanFactoryPostProcessor\nBeanPostProcessor\npostProcessBeforeInitialization\npostProcessAfterInitialization\nPostConstruct\nConstructor\nAutowired\ninit-method\nafterPropertiesSet")]),t._v(" "),e("p",[t._v("第一步 bean注册\nBeanDefinitionRegistryPostProcessor")]),t._v(" "),e("p",[t._v("第二步 bean定义扩展\nBeanFactoryPostProcessor")]),t._v(" "),e("p",[t._v("第三步 Constructor 实例化")]),t._v(" "),e("p",[t._v("第四步 Autowired\n@Autowired是用于注入对象使用的，那么肯定本对象已经有了才能注入依赖的对象，所以构造器Constructor优先于@Autowired执行")]),t._v(" "),e("p",[t._v("第五步 bean功能扩展BeanPostProcessor\npostProcessBeforeInitialization bean初始化之前执行")]),t._v(" "),e("p",[t._v("第六步 PostConstruct\n@PostConstruct的描述，必须在所有的依赖都注入，所以@Autowired是优先于@PostConstruct执行的")]),t._v(" "),e("p",[t._v("第七步 afterPropertiesSet 初始化方法\n初始化bean的时候执行，可以针对某个具体的bean进行配置。afterPropertiesSet 必须实现 InitializingBean接口。实现 InitializingBean接口必须实现afterPropertiesSet方法")]),t._v(" "),e("p",[t._v("第八步 init-method 初始化方法（xml）")]),t._v(" "),e("p",[t._v("第九步 bean功能扩展BeanPostProcessor\npostProcessAfterInitialization bean初始化之后执行")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/u014365523/article/details/118684204",target:"_blank",rel:"noopener noreferrer"}},[t._v("原文链接"),e("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=r.exports}}]);